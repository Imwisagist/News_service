name: ITFOX backend

on:
  push:
    branches:
      - 'main'

jobs:

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
    
    - name: Check out the repo
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker 
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      uses: docker/build-push-action@v2
      with:
        context: backend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/itfox_backend:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.PASSWORD }}
        script: |
          cd itfox_project/
          docker compose down
          docker pull ${{ secrets.DOCKER_USERNAME }}/itfox_backend:latest

          sysctl -w vm.drop_caches=3
          rm .env
          touch .env
          
          echo DEBUG=${{ secrets.DEBUG }} >> .env
          echo SQLLITE_SELECTED=${{ secrets.SQLLITE_SELECTED }} >> .env
          
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo SU_USERNAME=${{ secrets.SU_USERNAME }} >> .env
          echo SU_PASSWORD=${{ secrets.SU_PASSWORD }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env
          
          docker-compose up -d
          docker image prune --filter "dangling=true" -f
          sysctl -w vm.drop_caches=3